NEWS APPLICATION 

So now coming over to my first project which i made using ANDROID STUDIO called as NEWS APPLICATION . The Languages i used here is JAVA and XML ( XML files are used to define the user interface of the app. ) for front end developent and integrating RESTful APIs for fetching real-time news data .

The app follows the MVVM architecture pattern, making use of Android Architecture Components for efficient data handling.

( MVVM Architecture: Implemented the Model-View-ViewModel (MVVM) architectural pattern to separate the UI, business logic, and data layers, ensuring a robust and maintainable codebase. )

Now coming over to the objectives of this projects -
 - News Delivery 
 - Real-time Updates
 - User Interaction
 - User Interface and Experience  

Some of the predefined modules and methods used are Activities and Fragments , RecyclerView , Intents , Network Request Libraries , SharedPreferences , WebView .

NEWS API key is added to string.xml file . ( News API is a third-party API that provides access to various news articles and headlines from different sources. )

Features - 

- 5 different language resources.
- 6 different news categories.
( The app offers news articles from various categories, such as "Sports," "Technology," "Entertainment," "Health," "Business," etc. Users can choose their preferred category to view relevant news. )
- News search.
- News detail.
- Open the news source URL.

Third Party Libraries Used : Retrofit, Glide, ButterKnife, Gson 
( Retrofit: Retrofit is a popular HTTP client library for Android that simplifies the process of making network requests. It's used to interact with the News API to fetch news data.

Glide: Glide is an image loading and caching library for Android. It's used to display images, such as news article thumbnails, efficiently.

ButterKnife: ButterKnife is a view binding library for Android that simplifies the process of accessing and setting views in activities and fragments.

Gson: Gson is a library for converting JSON data to Java objects and vice versa. It's used to deserialize the JSON responses from the News API into Java objects. )

Explanation : 

1. RecyclerView:

The RecyclerView is a more advanced version of ListView and is used to display a list of items efficiently. It recycles and reuses views as the user scrolls through the list, improving performance. 

2. Custom Adapter (RecyclerView.Adapter):

To populate data into the RecyclerView, a custom adapter is used. The adapter binds data to individual views and manages the data set. 

3. LinearLayout:

LinearLayout is used in XML layouts to arrange UI elements either horizontally or vertically.

4. SearchView:

The SearchView widget is used to implement the news search functionality. Users can enter search queries, and the app will display relevant news articles. 

5. WebView:

WebView is used to open the original source URL of a news article in the user's web browser.

This Project demonstrates my ability to work with various Android components and third-party libraries to deliver a robust and user-friendly application.

INTERVIEW QUESTIONS : 

1 : What is the architecture pattern used in the Sample News App, and why did you choose it?

-> : The Sample News App is built using the MVVM (Model-View-ViewModel) architecture pattern. MVVM separates the UI (View) from the data and business logic (ViewModel). I chose this pattern because it promotes better code organization, testability, and maintainability. It also allows for smoother collaboration between developers working on different parts of the app.

2 : How did you integrate the News API into the app to fetch news articles?

-> : I used Retrofit, a powerful networking library, to make HTTP requests to the News API. Retrofit allows me to define an API interface (NewsApiService) with methods corresponding to different API endpoints. I set up the necessary base URL and query parameters using Retrofit annotations. The API responses, which are in JSON format, are then deserialized into NewsArticle objects using Gson, a JSON serialization/deserialization library.

3 : How did you handle the display of news articles in the app's UI?

-> : To display news articles in a list, I used a RecyclerView along with a custom adapter (NewsAdapter). The RecyclerView efficiently recycles and reuses views as the user scrolls through the list, improving performance. The NewsAdapter binds data from the NewsViewModel to individual views in the list, ensuring smooth scrolling and optimized memory usage.

4 : How did you enable users to search for specific news articles in the app?

-> : I implemented a search functionality using the SearchView widget. Users can enter keywords or phrases in the SearchView, and the app responds to the text changes and submits the search query. The NewsViewModel handles the search query and triggers API requests with the user's input to fetch relevant news articles.

5 : How did you allow users to filter news articles by language and category?

-> : I provided language and category filters using UI elements like spinners or dropdowns. Users can select their preferred language and category, and the app updates the API requests accordingly with the selected parameters. This allows users to customize their news feed based on their interests.

6 : How did you optimize image loading for news article thumbnails?

-> : I used Glide, an image loading and caching library, to efficiently load and display article thumbnails. Glide automatically handles image caching and memory management, ensuring smooth and fast image loading. This improves the overall performance of the app, especially when displaying a list of news articles with images.

7 : How did you implement opening the original source URL of a news article in the app?

-> : When users click on a news article in the list, the app opens the NewsDetailActivity, which contains a WebView. The WebView loads the URL of the selected news article, allowing users to read the full article on the original source website directly from within the app.

8 : How did you handle error scenarios, such as API failures or network issues?

-> : I implemented error handling in the NewsViewModel to detect API failures and network issues. When an error occurs, the ViewModel provides appropriate error messages to the UI, informing users of any issues. Additionally, I used LiveData to notify the UI about loading states, ensuring a seamless user experience during API calls.

9 : What are the main benefits of using MVVM architecture in the Sample News App?

-> : MVVM architecture offers several benefits, including:
Separation of concerns, making the codebase more maintainable and scalable.
Improved testability, as business logic is decoupled from the UI.
Better collaboration among developers, as each team member can focus on their specific area of expertise (View, ViewModel, Model).
LiveData integration for observing data changes and automatically updating the UI.